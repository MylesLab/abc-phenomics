write.table(figure_table, file = "../figures_tables/supp_tables/20210413_supp_table_3.csv", quote = F, sep = ",", row.names = F)
#save table
write.table(figure_table, file = "../figures_tables/20210413_supp_table_3.csv", quote = F, sep = ",", row.names = F)
View(abc_phenos)
#See if the rootstock and crab accessions are different signifcantly from the rest of the collection.
rando_uses <- abc_phenos %>% filter(use == "rootstock" | use == "crab")
rando_uses <- rando_uses %>% select(PLANTID, apple_id, precocity_16_harv, flowering_jul_16_harv, time_ripen_2017, date_jul_17_harv, juiciness_16_harv, weight_avg_17_harv, firmness_avg_17_harv, brix_17_harv, acidity_17_harv, tpc, percent_weight_avg_17, percent_firmness_avg_17, percent_brix_17, percent_acidity_17)
View(rando_uses)
View(rando_uses)
test <- abc_phenos[duplicated(abc_phenos$ACCID),]
View(test)
test <- abc_phenos[!is.na(duplicated(abc_phenos$ACCID)),]
test <- abc_phenos[duplicated(abc_phenos$ACCID),]
test <- [!is.na(test$ACCID),]
test <- test[!is.na(test$ACCID),]
#load packages
library("readr")
library("dplyr")
library("readxl")
library("RColorBrewer")
library("gplots")
library("viridis")
library("scales")
library("tidyverse")
library("cowplot")
library("gridExtra")
library("grid")
theme_set(theme_classic())
#load phenotype data
abc_phenos <- read_csv("../data/20190322_final_all_abc_phenos.csv")
#load ripening time from 2017. This phenoytpe was  REML corrected after all the other phenotypes because it wasn't originally going to be included.
time_ripen <- read_csv("../data/20200305_time_ripen_2017.csv")
#join tables
abc_phenos <- left_join(abc_phenos, time_ripen, by = "apple_id")
#remove phenotypes we don't need
#remove phones we don't need to show.
abc_phenos <- abc_phenos %>% select(-firmness_var_16_stor, -weight_var_16_harv, -firmness_var_16_harv, -brix_var_16_harv, -branch_val_16_harv, -change_firmness_var_16, -percent_firmness_var_16, -change_acidity_16, -change_brix_avg_16, -change_brix_acid_16, -change_weight_avg_16, -change_firmness_avg_16, -firmness_var_17_stor, -percent_decay_17_stor, -percent_disorder_17_stor, -firmness_var_17_harv, -change_firmness_var_17, -change_acidity_17, -change_brix_17, -change_weight_avg_17, -change_firmness_avg_17, -percent_firmness_var_17, -change_brix_acid_17, -dead_trees, -oct_frost_percent_disordered, -spring_frost_lower_index, -spring_frost_upper_index, -spring_frost_pooled_index, -spring_frost_difference_index, -flowering_gdd_16_harv, -date_gdd_16_harv, -date_gdd_17_harv)
#we also want to inlcude the ACCID that's linked to the apple ids, load ABC population file.
abc_pop_info <- read_excel("../data/20200204_abc_pop_info.xlsx")
#delete  irrelevant columns
abc_pop_info <- abc_pop_info %>% select(PLANTID, ACCID, origin, apple_id)
abc_pop_info <- abc_pop_info[!duplicated(abc_pop_info$apple_id), ]
#join phenotype table and population file.
abc_phenos <- left_join(abc_phenos, abc_pop_info, by = "apple_id")
#load meta data
meta_data <- read_excel("../data/20201102_meta_data.xlsx")
#delete columns we don't need
meta_data$ACCID <- NULL
meta_data$PLANTID <- NULL
meta_data$Cultivar <- NULL
meta_data$X15 <- NULL
meta_data$X__1 <- NULL
meta_data$Color <- NULL
meta_data$grin_country <- NULL
meta_data$X17 <- NULL
meta_data$X16 <- NULL
meta_data$`Info Source` <- NULL
meta_data$grin_enduse <- NULL
meta_data$grin_markettype <- NULL
meta_data$origin <- NULL
meta_data$type <- NULL
meta_data$`Discovered/described/cultivated` <- NULL
meta_data$Harvest <- NULL
meta_data$World <- NULL
meta_data$...22 <- NULL
#rename columns
meta_data <- meta_data %>% dplyr:::rename(release_year = 'Release Year') %>% dplyr:::rename(country = Country) %>% dplyr:::rename(use = Use)
#look at the species
#table(meta_data$species)
#change some of the species names.
meta_data[which(meta_data$apple_id=="174"), "species"] <- NA
meta_data[which(meta_data$species=="sieversii var. kirghisorum"), "species"] <- "sieversii"
meta_data[which(meta_data$species=="sieversii var. turkmenorum"), "species"] <- "sieversii"
meta_data[which(meta_data$species=="NA"), "species"] <- NA
meta_data[which(meta_data$species=="pumila"), "species"] <- "domestica"
#look at release year
#table(meta_data$release_year)
meta_data[which(meta_data$apple_id== 468), "release_year"] <- NA
meta_data[which(meta_data$release_year== "NA"), "release_year"] <- NA
meta_data$release_year <- as.numeric(as.character(meta_data$release_year))
#look at country
#table(meta_data$country)
meta_data[which(meta_data$country== "NA"), "country"] <- NA
#clean up country names
meta_data[which(meta_data$country=="australia"), "country"] <- "Australia"
meta_data[which(meta_data$country=="belgium"), "country"] <- "Belgium"
meta_data[which(meta_data$country=="czech Republic"), "country"] <- "Czech Republic"
meta_data[which(meta_data$country=="denmark"), "country"] <- "Denmark"
meta_data[which(meta_data$country=="former Soviet Union"), "country"] <- "Former Soviet Union"
meta_data[which(meta_data$country=="france"), "country"] <- "France"
meta_data[which(meta_data$country=="England"), "country"] <- "United Kingdom"
meta_data[which(meta_data$country=="Wales"), "country"] <- "United Kingdom"
meta_data[which(meta_data$country=="Scotland"), "country"] <- "United Kingdom"
meta_data[which(meta_data$country=="germany"), "country"] <- "Germany"
meta_data[which(meta_data$country=="isreal"), "country"] <- "Isreal"
meta_data[which(meta_data$country=="italy"), "country"] <- "Italy"
meta_data[which(meta_data$country=="japan"), "country"] <- "Japan"
meta_data[which(meta_data$country=="kazakhstan"), "country"] <- "Kazakhstan"
meta_data[which(meta_data$country=="latvia"), "country"] <- "Latvia"
meta_data[which(meta_data$country=="netherlands"), "country"] <- "Netherlands"
meta_data[which(meta_data$country=="poland"), "country"] <- "Poland"
meta_data[which(meta_data$country=="romania"), "country"] <- "Romania"
meta_data[which(meta_data$country=="south Africa"), "country"] <- "South Africa"
meta_data[which(meta_data$country=="sweden"), "country"] <- "Sweden"
meta_data[which(meta_data$country=="switzerland"), "country"] <- "Switzerland"
meta_data[which(meta_data$country=="yugoslavia"), "country"] <- "Yugoslavia"
meta_data[which(meta_data$country=="europe"), "country"] <- "Europe"
meta_data[which(meta_data$country=="canada"), "country"] <- "Canada"
meta_data[which(meta_data$country=="hungary"), "country"] <- "Hungary"
meta_data[which(meta_data$country=="Isreal"), "country"] <- "Israel"
# Create replacements data frame
old_replaces <- data.frame(country = c('Afghanistan', 'Algeria','Austria', 'Belgium', 'Bulgaria', 'China', 'Czech Republic', 'Denmark', 'Estonia', 'Europe', 'Finland', 'Former Soviet Union', 'France', 'Germany', 'Hungary', 'India', 'Ireland', 'Israel', 'Italy', 'Japan', 'Kazakhstan', 'Latvia', 'Lithuania', 'Macedonia', 'Netherlands', 'Pakistan', 'Poland', 'Portugal', 'Romania', 'Russia', 'Serbia', 'Spain', 'Sweden', 'Switzerland', 'Tajikistan', 'Turkmenistan', 'Ukraine', 'United Kingdom', 'Uzbekistan', 'Yugoslavia'), old = "old")
new_replaces <- data.frame(country = c('Australia', 'Brazil', 'Canada', 'New Zealand',  'United States', 'South Africa', 'Zimbabwe'), new = "new")
meta_data <- full_join(meta_data, old_replaces, by = "country")
meta_data <- full_join(meta_data, new_replaces, by = "country")
#unite
meta_data <- unite(meta_data, location, old, new)
#table(meta_data$location)
#fix values in columns
meta_data[which(meta_data$location== "NA_NA"), "location"] <- NA
meta_data[which(meta_data$location== "NA_new"), "location"] <- "new"
meta_data[which(meta_data$location== "old_NA"), "location"] <- "old"
#look at use column
#table(meta_data$use)
meta_data[which(meta_data$use== "NA"), "use"] <- NA
#change values in "use" column to either cider of dessert.
cider_replaces <- data.frame(use = c("cider", "Cider", "Cooking/Cider"), cider = "cider")
dessert_replaces <- data.frame(use = c("cooking", "Cooking", "dessert", "Dessert", "eating", "Eating"), dessert = "dessert")
wild_replaces <- data.frame(use = c("wild", "Wild"), wild = "wild")
meta_data <- full_join(meta_data, cider_replaces, by = "use")
meta_data <- full_join(meta_data, dessert_replaces, by = "use")
meta_data <- full_join(meta_data, wild_replaces, by = "use")
#recode crab uses
meta_data[which(meta_data$use== "Crab Apple"), "use"] <- "crab"
meta_data[which(meta_data$use== "Crab"), "use"] <- "crab"
meta_data[which(meta_data$use== "Rootstock"), "use"] <- "rootstock"
meta_data <- unite(meta_data, new_use, cider, dessert, wild)
meta_data[which(meta_data$new_use== "cider_NA_NA"), "new_use"] <- "cider"
meta_data[which(meta_data$new_use== "NA_dessert_NA"), "new_use"] <- "dessert"
meta_data[which(meta_data$new_use== "NA_NA_wild"), "new_use"] <- "wild"
meta_data[which(meta_data$use== "rootstock"), "new_use"] <- "rootstock"
meta_data[which(meta_data$use== "crab"), "new_use"] <- "crab"
meta_data[which(meta_data$new_use== "NA_NA_NA"), "new_use"] <- NA
#delete use column
meta_data$use <- NULL
#rename columns
meta_data <- meta_data %>% dplyr::rename(use = new_use) %>% dplyr::rename(world = location)
names(meta_data)[names(meta_data) == "new_use"] <- "use"
names(meta_data)[names(meta_data) == "location"] <- "world"
#check
#Use there are 104, cider, 805 dessert, 79 wild
wild <-meta_data[which(meta_data$use== "wild"), ]
#species: 1032 domestica, 78 sieversii
sieversii <-meta_data[which(meta_data$species== "sieversii"), ]
kazakh <-meta_data[which(meta_data$country== "Kazakhstan"), ]
#world: 546 new, 546 old
#table(meta_data$world)
#change apple id 200 to wild use since it's sieversii
meta_data[which(meta_data$apple_id== 200), "use"] <- "wild"
#Change apple id 193 and 190 use to NA because the species is domestica so their use is not wild.
meta_data[which(meta_data$apple_id== 193), "use"] <- NA
meta_data[which(meta_data$apple_id== 190), "use"] <- NA
#check
#table(meta_data$use)
#now there are 104 cider, 804 dessert, 78 wild, 5 crab, 1 rootstock.
#table(meta_data$world)
#now there are 546 new world and 546 old (there will be 469 for comparisons when the wild sieversii apples are removed.)
#GRIN table was updated, Barenhecke 3 Klipphausen (apple ID = 199) is actually sylvestris not domestica, so correct this.
meta_data[which(meta_data$apple_id== 199), "species"] <- "sylvestris"
#table(meta_data$species)
#1031 domestica, 4 hybrids, 78 sieversii and 3 sylvestris Perfect, number of wild matches number of sieversii.
sum
sun(meta_data$species == "domestica")
sum(meta_data$species == "domestica")
sum(!is.na(meta_data$species == "domestica"))
table(meta_data$species)
nrows(!is.na(meta_data$species == "domestica"))
nrow(!is.na(meta_data$species == "domestica"))
?nrow
nrow(meta_data$species == "domestica")
species <- meta_data %>% group_by(species) %>% get_summary_stats(show = "n")
#load packages
library("readr")
library("dplyr")
library("readxl")
library("RColorBrewer")
library("gplots")
library("viridis")
library("scales")
library("tidyverse")
library("cowplot")
library("gridExtra")
library("grid")
theme_set(theme_classic())
species <- meta_data %>% group_by(species) %>% get_summary_stats(show = "n")
library("rstatix")
species <- meta_data %>% group_by(species) %>% get_summary_stats(show = "n")
View(species)
species <- meta_data %>% group_by(species) %>% get_summary_stats(apple_id, show = "n")
View(species)
#load packages
library(tidyverse)
#load packages
library("readr")
library("dplyr")
library("RColorBrewer")
library("gplots")
library("viridis")
library("scales")
library("tidyverse")
library("cowplot")
library("gridExtra")
library("grid")
theme_set(theme_classic())
#load data
abc_phenos <- read_csv("../outputs/pheno_meta_data.csv")
#Sean's stuff - this is how he does it.
dom = (abc_phenos$species == "domestica")
siev = (abc_phenos$species == "sieversii")
old = (abc_phenos$world == "old")
new = (abc_phenos$world == "new")
cider = (abc_phenos$use == "cider")
dessert = (abc_phenos$use == "dessert")
abc_phenos <- abc_phenos %>% select(precocity_16_harv, flowering_jul_16_harv, time_ripen_2017, date_jul_17_harv, juiciness_16_harv, weight_avg_17_harv, firmness_avg_17_harv, brix_17_harv, acidity_17_harv, brix_acid_17_harv, tpc, percent_weight_avg_17, percent_firmness_avg_17, percent_brix_17, percent_acidity_17)
abc_phenos <- as.data.frame(abc_phenos)
species_p = world_p = use_p = dom_median = siev_median = old_median = new_median = dessert_median = cider_median = c()
for (i in 1:ncol(abc_phenos)) {
vec_loop = as.numeric(abc_phenos[,i])
dom_median[i] = round(median(vec_loop[dom], na.rm = T), 3)
siev_median[i] = round(median(vec_loop[siev], na.rm = T), 3)
old_median[i] = round(median(vec_loop[old], na.rm = T), 3)
new_median[i] = round(median(vec_loop[new], na.rm = T), 3)
dessert_median[i] = round(median(vec_loop[dessert], na.rm = T), 3)
cider_median[i] = round(median(vec_loop[cider], na.rm = T), 3)
species_p[i] = wilcox.test(vec_loop[dom], vec_loop[siev])$p.val
world_p[i] = wilcox.test(vec_loop[old], vec_loop[new])$p.val
use_p[i] = wilcox.test(vec_loop[dessert], vec_loop[cider])$p.val
}
#Correct for multiple comparisons
species_p = species_p * (ncol(abc_phenos)*3)
world_p = world_p * (ncol(abc_phenos)*3)
use_p = use_p * (ncol(abc_phenos)*3)
pval_tab = cbind(colnames(abc_phenos), dom_median, siev_median, species_p, new_median, old_median,world_p, dessert_median, cider_median, use_p)
View(pval_tab)
library("plotrix")
species_p = world_p = use_p = dom_median = siev_median = old_median = new_median = dessert_median = cider_median = dom_std = c()
for (i in 1:ncol(abc_phenos)) {
vec_loop = as.numeric(abc_phenos[,i])
dom_median[i] = round(median(vec_loop[dom], na.rm = T), 3)
siev_median[i] = round(median(vec_loop[siev], na.rm = T), 3)
old_median[i] = round(median(vec_loop[old], na.rm = T), 3)
new_median[i] = round(median(vec_loop[new], na.rm = T), 3)
dessert_median[i] = round(median(vec_loop[dessert], na.rm = T), 3)
cider_median[i] = round(median(vec_loop[cider], na.rm = T), 3)
dom_std[i] = round(std.error(vec_loop[dom], na.rm = T), 3)
#siev_std[i] = round(median(vec_loop[siev], na.rm = T), 3)
#old_std[i] = round(median(vec_loop[old], na.rm = T), 3)
#new_std[i] = round(median(vec_loop[new], na.rm = T), 3)
#dessert_std[i] = round(median(vec_loop[dessert], na.rm = T), 3)
#cider_std[i] = round(median(vec_loop[cider], na.rm = T), 3)
species_p[i] = wilcox.test(vec_loop[dom], vec_loop[siev])$p.val
world_p[i] = wilcox.test(vec_loop[old], vec_loop[new])$p.val
use_p[i] = wilcox.test(vec_loop[dessert], vec_loop[cider])$p.val
}
#Correct for multiple comparisons
species_p = species_p * (ncol(abc_phenos)*3)
world_p = world_p * (ncol(abc_phenos)*3)
use_p = use_p * (ncol(abc_phenos)*3)
pval_tab = cbind(colnames(abc_phenos), dom_median, siev_median, species_p, new_median, old_median,world_p, dessert_median, cider_median, use_p)
pval_tab = cbind(colnames(abc_phenos), dom_median, siev_median, species_p, new_median, old_median,world_p, dessert_median, cider_median, use_p, dom_std)
View(pval_tab)
View(abc_phenos)
#load data
abc_phenos <- read_csv("../outputs/pheno_meta_data.csv")
#Sean's stuff - this is how he does it.
dom = (abc_phenos$species == "domestica")
siev = (abc_phenos$species == "sieversii")
old = (abc_phenos$world == "old")
new = (abc_phenos$world == "new")
cider = (abc_phenos$use == "cider")
dessert = (abc_phenos$use == "dessert")
abc_phenos <- abc_phenos %>% select(precocity_16_harv, flowering_jul_16_harv, time_ripen_2017, date_jul_17_harv, juiciness_16_harv, weight_avg_17_harv, firmness_avg_17_harv, brix_17_harv, acidity_17_harv, brix_acid_17_harv, tpc, percent_weight_avg_17, percent_firmness_avg_17, percent_brix_17, percent_acidity_17)
abc_phenos <- as.data.frame(abc_phenos)
species_p = world_p = use_p = dom_median = siev_median = old_median = new_median = dessert_median = cider_median = dom_std = siev_std = old_std = new_std = dessert_std = cider_std = c()
for (i in 1:ncol(abc_phenos)) {
vec_loop = as.numeric(abc_phenos[,i])
dom_median[i] = round(median(vec_loop[dom], na.rm = T), 3)
siev_median[i] = round(median(vec_loop[siev], na.rm = T), 3)
old_median[i] = round(median(vec_loop[old], na.rm = T), 3)
new_median[i] = round(median(vec_loop[new], na.rm = T), 3)
dessert_median[i] = round(median(vec_loop[dessert], na.rm = T), 3)
cider_median[i] = round(median(vec_loop[cider], na.rm = T), 3)
dom_std[i] = round(std.error(vec_loop[dom], na.rm = T), 3)
siev_std[i] = round(std.error(vec_loop[siev], na.rm = T), 3)
old_std[i] = round(std.error(vec_loop[old], na.rm = T), 3)
new_std[i] = round(std.error(vec_loop[new], na.rm = T), 3)
dessert_std[i] = round(std.error(vec_loop[dessert], na.rm = T), 3)
cider_std[i] = round(std.error(vec_loop[cider], na.rm = T), 3)
species_p[i] = wilcox.test(vec_loop[dom], vec_loop[siev])$p.val
world_p[i] = wilcox.test(vec_loop[old], vec_loop[new])$p.val
use_p[i] = wilcox.test(vec_loop[dessert], vec_loop[cider])$p.val
}
#Correct for multiple comparisons
species_p = species_p * (ncol(abc_phenos)*3)
world_p = world_p * (ncol(abc_phenos)*3)
use_p = use_p * (ncol(abc_phenos)*3)
pval_tab = cbind(colnames(abc_phenos), dom_median, dom_std, siev_median, siev_std, species_p, new_median, new_std, old_median, old_std, world_p, dessert_median, dessert_std, cider_median, cider_std, use_p)
View(pval_tab)
?std.error
#load data
abc_phenos <- read_csv("../outputs/pheno_meta_data.csv")
domestica <-abc_phenos %>%
select(species, precocity_16_harv) %>%
filter(species == 'domestica')
View(domestica)
sd(domestica$precocity_16_harv)/sqrt(sum(!is.na(domestica$precocity_16_harv)))
sd(!is.na(domestica$precocity_16_harv))/sqrt(sum(!is.na(domestica$precocity_16_harv)))
View(pval_tab)
table(dom)
table(siev)
!is.na(domestica$precocity_16_harv)
sd(domestica$precocity_16_harv, na.rm = T))/sqrt(sum(domestica$precocity_16_harv, na.rm = T))
sd(domestica$precocity_16_harv, na.rm = T)/sqrt(sum(domestica$precocity_16_harv, na.rm = T))
sum(domestica$precocity_16_harv, na.rm = T)
sd(domestica$precocity_16_harv, na.rm = T)/sqrt(length(domestica$precocity_16_harv, na.rm = T))
sd(domestica$precocity_16_harv, na.rm = T)/sqrt(length(domestica$precocity_16_harv))
length(domestica$precocity_16_harv)
write.table(pval_tab, file = "../figures_tables/supp_table_6.txt", sep = "\t", row.names = F, quote = F)
#Load phenotype table
abc_phenos <- read_csv("../outputs/pheno_meta_data.csv")
abc_pheno_field <- abc_phenos %>% select(apple_id, precocity_16_harv, flowering_jul_16_harv, time_ripen_2017, date_jul_17_harv, juiciness_16_harv, weight_avg_17_harv, firmness_avg_17_harv, brix_17_harv, acidity_17_harv, tpc, percent_weight_avg_17, percent_firmness_avg_17, percent_brix_17, percent_acidity_17)  %>% gather(key="pheno", value="value", -apple_id)
#change the phenotype to a factor and reorder the factor
class(abc_pheno_field$pheno)
abc_pheno_field$pheno <- as.factor(abc_pheno_field$pheno)
levels(abc_pheno_field$pheno)
#set the levels for the factors and reorder the levels/rename
abc_pheno_field$pheno <- factor(abc_pheno_field$pheno, levels=c("precocity_16_harv", "flowering_jul_16_harv", "time_ripen_2017", "date_jul_17_harv", "juiciness_16_harv", "weight_avg_17_harv", "firmness_avg_17_harv",  "brix_17_harv", "acidity_17_harv", "tpc", "percent_weight_avg_17", "percent_firmness_avg_17", "percent_brix_17", "percent_acidity_17"))
levels(abc_pheno_field$pheno)
#filter the top ten apples then calculate the max and the median, then summarize to get min and max
top_ten <-  abc_pheno_field %>% filter(apple_id %in% c(48, 205, 160, 167, 1223, 222, 57, 235, 171))
#caluclate min of each trait
min_top_ten <- top_ten %>% group_by(pheno) %>% slice(which.min(value))
#caluclate max of each trait
max_top_ten <- top_ten %>% group_by(pheno) %>% slice(which.max(value))
#calculate the median of the top ten
median_top_ten <- top_ten %>% group_by(pheno) %>% summarise(median = median(value, na.rm=T))
#calculate IQR
iqr_top_ten <- top_ten %>% group_by(pheno) %>% summarise(iqr_top_ten= IQR(value, na.rm=T))
#calculate the standard error
error_top_ten <- top_ten %>% group_by(pheno) %>% summarise(error_top_ten= sd(value, na.rm=TRUE) / sqrt(sum(!is.na(value))))
#make a table with the max and min values together
min_max_top_ten <- left_join(min_top_ten, max_top_ten, by = "pheno")
min_max_top_ten <- left_join(min_max_top_ten, median_top_ten, by = "pheno")
min_max_top_ten <- left_join(min_max_top_ten, iqr_top_ten, by = "pheno")
min_max_top_ten <- left_join(min_max_top_ten, error_top_ten, by = "pheno")
min_max_top_ten <- min_max_top_ten %>% select(-c(apple_id.x, apple_id.y))
#rename columns
colnames(min_max_top_ten)[colnames(min_max_top_ten)=="value.x"] <- "min_top"
colnames(min_max_top_ten)[colnames(min_max_top_ten)=="value.y"] <- "max_top"
colnames(min_max_top_ten)[colnames(min_max_top_ten)=="median"] <- "median_top"
min_max_top_ten <- min_max_top_ten %>% group_by(pheno)
library("plotrix")
?summarise
#Load phenotype table
abc_phenos <- read_csv("../outputs/pheno_meta_data.csv")
abc_pheno_field <- abc_phenos %>% select(apple_id, precocity_16_harv, flowering_jul_16_harv, time_ripen_2017, date_jul_17_harv, juiciness_16_harv, weight_avg_17_harv, firmness_avg_17_harv, brix_17_harv, acidity_17_harv, tpc, percent_weight_avg_17, percent_firmness_avg_17, percent_brix_17, percent_acidity_17)  %>% gather(key="pheno", value="value", -apple_id)
#change the phenotype to a factor and reorder the factor
class(abc_pheno_field$pheno)
abc_pheno_field$pheno <- as.factor(abc_pheno_field$pheno)
levels(abc_pheno_field$pheno)
#set the levels for the factors and reorder the levels/rename
abc_pheno_field$pheno <- factor(abc_pheno_field$pheno, levels=c("precocity_16_harv", "flowering_jul_16_harv", "time_ripen_2017", "date_jul_17_harv", "juiciness_16_harv", "weight_avg_17_harv", "firmness_avg_17_harv",  "brix_17_harv", "acidity_17_harv", "tpc", "percent_weight_avg_17", "percent_firmness_avg_17", "percent_brix_17", "percent_acidity_17"))
levels(abc_pheno_field$pheno)
#filter the top ten apples then calculate the max and the median, then summarize to get min and max
top_ten <-  abc_pheno_field %>% filter(apple_id %in% c(48, 205, 160, 167, 1223, 222, 57, 235, 171))
#caluclate min of each trait
min_top_ten <- top_ten %>% group_by(pheno) %>% slice(which.min(value))
#calculate max of each trait
max_top_ten <- top_ten %>% group_by(pheno) %>% slice(which.max(value))
#calculate the median of the top ten
median_top_ten <- top_ten %>% group_by(pheno) %>% summarise(median = median(value, na.rm=T))
#calculate IQR
iqr_top_ten <- top_ten %>% group_by(pheno) %>% summarise(iqr_top_ten= IQR(value, na.rm=T))
#calculate the standard error
error_top_ten <- top_ten %>% group_by(pheno) %>% summarise(error_top_ten= std.error(value, na.rm = T))
#make a table with the max and min values together
min_max_top_ten <- left_join(min_top_ten, max_top_ten, by = "pheno")
min_max_top_ten <- left_join(min_max_top_ten, median_top_ten, by = "pheno")
min_max_top_ten <- left_join(min_max_top_ten, iqr_top_ten, by = "pheno")
min_max_top_ten <- left_join(min_max_top_ten, error_top_ten, by = "pheno")
min_max_top_ten <- min_max_top_ten %>% select(-c(apple_id.x, apple_id.y))
#rename columns
colnames(min_max_top_ten)[colnames(min_max_top_ten)=="value.x"] <- "min_top"
colnames(min_max_top_ten)[colnames(min_max_top_ten)=="value.y"] <- "max_top"
colnames(min_max_top_ten)[colnames(min_max_top_ten)=="median"] <- "median_top"
min_max_top_ten <- min_max_top_ten %>% group_by(pheno)
#filter the top ten apples  out then calculate the max and the median, then summarize to get min and max
orchard <- filter(abc_pheno_field, !apple_id %in% c(48, 205, 160, 167, 1223, 222, 57, 235, 171))
#caluclate min of each trait
min_orchard <- orchard %>% group_by(pheno) %>% slice(which.min(value))
#caluclate max of each trait
max_orchard <- orchard %>% group_by(pheno) %>% slice(which.max(value))
#calculate the median of the top ten
median_orchard <- orchard %>% group_by(pheno) %>% summarise(median = median(value, na.rm=T))
#calculate IQR
iqr_orchard <- orchard %>% group_by(pheno) %>% summarise(iqr_orchard= IQR(value, na.rm=T))
#calculate the standard error
error_orchard <- orchard %>% group_by(pheno) %>% summarise(error_top_ten= std.error(value, na.rm = T))
#make a table with the max and min values together
stats_orchard <- left_join(min_orchard, max_orchard, by = "pheno")
stats_orchard <- left_join(stats_orchard, median_orchard, by = "pheno")
stats_orchard <- left_join(stats_orchard, iqr_orchard, by = "pheno")
stats_orchard <- left_join(stats_orchard, error_orchard, by = "pheno")
stats_orchard <- stats_orchard %>% select(-c(apple_id.x, apple_id.y)) %>% rename(min_orchard = value.x) %>% rename(max_orchard = value.y) %>% rename(median_orchard = median)
#combine the top ten and orchard tables
figure_table <- left_join(min_max_top_ten, stats_orchard, by = "pheno")
#########
phenos <- abc_phenos %>% select(apple_id, precocity_16_harv, flowering_jul_16_harv, time_ripen_2017, date_jul_17_harv, juiciness_16_harv, weight_avg_17_harv, firmness_avg_17_harv, brix_17_harv, acidity_17_harv, tpc, percent_weight_avg_17, percent_firmness_avg_17, percent_brix_17, percent_acidity_17)
#make orchard dataframe
all_orchard <- filter(phenos, !apple_id %in% c(48, 205, 160, 167, 1223, 222, 57, 235, 171))
all_orchard <- mutate(all_orchard, apple_type="orchard")
all_orchard <- all_orchard %>% select(-apple_id, precocity_16_harv:apple_type)
orchard_order <- c("apple_type","precocity_16_harv", "flowering_jul_16_harv", "time_ripen_2017", "date_jul_17_harv", "juiciness_16_harv", "weight_avg_17_harv", "firmness_avg_17_harv",  "brix_17_harv", "acidity_17_harv", "tpc", "percent_weight_avg_17", "percent_firmness_avg_17", "percent_brix_17", "percent_acidity_17")
all_orchard <- all_orchard[, orchard_order]
#make elite dataframe
elite <- filter(phenos, apple_id %in% c(48, 205, 160, 167, 1223, 222, 57, 235, 171))
elite <- mutate(elite, apple_type="elite")
elite <- elite %>% select(-apple_id, precocity_16_harv:apple_type)
elite_order <- c("apple_type","precocity_16_harv", "flowering_jul_16_harv", "time_ripen_2017", "date_jul_17_harv", "juiciness_16_harv", "weight_avg_17_harv", "firmness_avg_17_harv",  "brix_17_harv", "acidity_17_harv", "tpc", "percent_weight_avg_17", "percent_firmness_avg_17", "percent_brix_17", "percent_acidity_17")
elite <- elite[, elite_order]
comparison_phenos <- full_join(all_orchard, elite)
#calculate wilcoxin p values
precocity_p <- wilcox.test(precocity_16_harv ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
flowering_p <- wilcox.test(flowering_jul_16_harv ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
ripen_p <- wilcox.test(time_ripen_2017 ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
date_p <- wilcox.test(date_jul_17_harv ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
juiciness_p <- wilcox.test(juiciness_16_harv ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
weight_p <- wilcox.test(weight_avg_17_harv ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
firmness_p <- wilcox.test(firmness_avg_17_harv ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
brix_p <- wilcox.test(brix_17_harv ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
acidity_p <- wilcox.test(acidity_17_harv ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
tpc_p <- wilcox.test(tpc ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
change_weight_p <- wilcox.test(percent_weight_avg_17 ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
change_firmness_p <- wilcox.test(percent_firmness_avg_17 ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
change_brix_p <- wilcox.test(percent_brix_17 ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
change_acidity_p <- wilcox.test(percent_acidity_17 ~ apple_type, data = comparison_phenos,
exact = FALSE)$p.value
biglist <- c(precocity_p, flowering_p, ripen_p, date_p, juiciness_p, weight_p, firmness_p,  brix_p, acidity_p, tpc_p, change_weight_p, change_firmness_p, change_brix_p, change_acidity_p)
corrected_biglist <- p.adjust(biglist, method = "bonferroni")
#add p-values to the p value column in the figure table.
figure_table$p_values <- biglist
figure_table$p_values_corrected <- corrected_biglist
figure_table <- figure_table %>% group_by(pheno) %>% mutate(prop_dist = (max_top - min_top)/(max_orchard - min_orchard))
figure_table <-figure_table %>% mutate_if(is.numeric, signif, digits = 3)
colnames(figure_table) <- c("Phenotype", "Min 10", "Max 10", "median 10", "IQR 10", "Std. Error 10", "Min", "Max", "Median", "IQR", "Std. Error", "Wilcoxin p-values", "Bonferroni p-values", "Top 10 Proportion of Distribution")
figure_table <- as.data.frame(figure_table)
#decided to take out the IQR columns
figure_table$`IQR 10` <- NULL
figure_table$`IQR` <- NULL
#save table
write.table(figure_table, file = "../figures_tables/20210419_supp_table_3.csv", quote = F, sep = ",", row.names = F)
View(top_ten)
test <- top_ten %>% group_by(pheno) %>% summarise(error_top_ten= sd(value, na.rm=T)/sqrt(length(value), na.rm=T))
test <- top_ten %>%
filter(pheno == 'precocity_16_harv')
View(test)
sd(test$value, na.rm=T)/sqrt(length(test$value, na.rm=T))
sd(test$value, na.rm=T)/sqrt(length(test$value))
0.495731544*0.495731544
#load packages
library("readr")
library("dplyr")
library("RColorBrewer")
library("gplots")
library("viridis")
library("scales")
library("tidyverse")
library("cowplot")
library("gridExtra")
library("grid")
library("plotrix")
theme_set(theme_classic())
#Load phenotype table
abc_phenos <- read_csv("../outputs/pheno_meta_data.csv")
View(abc_phenos)
table(abc_phenos$species)
1030+5+78+3
0.335457184*0.335457184
0.575154794*0.575154794
0.211802974*0.211802974
0.248338194*0.248338194
-0.240966454*-0.240966454
-0.202544722*-0.202544722
0.170936564*0.170936564
0.508623946*0.508623946
0.495731544*0.495731544
0.162106816*0.162106816
0.306471816*0.306471816
0.291052373*0.291052373
